{"name": "test_create_user", "status": "failed", "statusDetails": {"message": "AssertionError: Test failed with errors: ['Assertion failed: User email matches : assert False']\nassert not ['Assertion failed: User email matches : assert False']", "trace": "def test_create_user():\n        \"Test creating a user and checking all fields.\"\n        global user_id\n        filename = \"./logs/gorest-api/test_create_user.log\"\n        setup_logger(filename)\n        results = []\n        payload = {\n            \"name\": \"ganesh123\",\n            \"email\": \"ganesh12@gmail.com\",\n            \"gender\": \"male\",\n            \"status\": \"active\"\n        }\n        response = requests.post(GOREST_API_URL, headers=GOREST_HEADERS, json=payload)\n        logger.info(f\"POST {GOREST_API_URL} - Status: {response.status_code}\")\n        logger.info(f\"Payload: {payload}\")\n        logger.info(f\"Response JSON: {response.text}\")\n        assert response.status_code == 201, f\"Failed to create user - status code: {response.status_code}\"\n        logger.info(\"User created successfully\")\n        data = response.json()\n        # Intentionally failing assertion for demonstration\n        log_assert(data[\"name\"] == payload[\"name\"], \"User name matches\", results)\n        log_assert(data[\"email\"]+\"999\" == payload[\"email\"], \"User email matches\", results)\n        log_assert(data[\"gender\"] == payload[\"gender\"], \"User gender matches\", results)\n        log_assert(data[\"status\"] == payload[\"status\"], \"User status matches\", results)\n        user_id = data[\"id\"]\n        # Attach log to Allure report\n        with open(filename, \"r\") as log_file:\n            allure.attach(log_file.read(), name=\"Test Log\", attachment_type=allure.attachment_type.TEXT)\n        print(results)\n>       assert not results, f\"Test failed with errors: {results}\"\nE       AssertionError: Test failed with errors: ['Assertion failed: User email matches : assert False']\nE       assert not ['Assertion failed: User email matches : assert False']\n\ntest_gorest_api.py:78: AssertionError"}, "description": "Test creating a user and checking all fields.", "attachments": [{"name": "Test Log", "source": "9d60aa68-d505-4ca7-8604-f2e25a9e2ae9-attachment.txt", "type": "text/plain"}, {"name": "log", "source": "7fc6c63c-4cfe-4655-8410-29dd25e12d77-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "93806fbd-dbdb-4d6e-bf7b-c34f59eb3614-attachment.txt", "type": "text/plain"}], "start": 1752763917365, "stop": 1752763918415, "uuid": "60e65007-16d6-4468-8b3e-c0ad663f261a", "historyId": "9d6459a5297824d02fa99294653c82f2", "testCaseId": "9d6459a5297824d02fa99294653c82f2", "fullName": "test_gorest_api#test_create_user", "labels": [{"name": "suite", "value": "test_gorest_api"}, {"name": "host", "value": "Hemesh"}, {"name": "thread", "value": "10800-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_gorest_api"}]}