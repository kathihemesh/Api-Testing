{"uid":"515432c7fd41972c","name":"test_create_user","fullName":"test_gorest_api#test_create_user","historyId":"9d6459a5297824d02fa99294653c82f2","time":{"start":1752763917365,"stop":1752763918415,"duration":1050},"description":"Test creating a user and checking all fields.","descriptionHtml":"<p>Test creating a user and checking all fields.</p>\n","status":"failed","statusMessage":"AssertionError: Test failed with errors: ['Assertion failed: User email matches : assert False']\nassert not ['Assertion failed: User email matches : assert False']","statusTrace":"def test_create_user():\n        \"Test creating a user and checking all fields.\"\n        global user_id\n        filename = \"./logs/gorest-api/test_create_user.log\"\n        setup_logger(filename)\n        results = []\n        payload = {\n            \"name\": \"ganesh123\",\n            \"email\": \"ganesh12@gmail.com\",\n            \"gender\": \"male\",\n            \"status\": \"active\"\n        }\n        response = requests.post(GOREST_API_URL, headers=GOREST_HEADERS, json=payload)\n        logger.info(f\"POST {GOREST_API_URL} - Status: {response.status_code}\")\n        logger.info(f\"Payload: {payload}\")\n        logger.info(f\"Response JSON: {response.text}\")\n        assert response.status_code == 201, f\"Failed to create user - status code: {response.status_code}\"\n        logger.info(\"User created successfully\")\n        data = response.json()\n        # Intentionally failing assertion for demonstration\n        log_assert(data[\"name\"] == payload[\"name\"], \"User name matches\", results)\n        log_assert(data[\"email\"]+\"999\" == payload[\"email\"], \"User email matches\", results)\n        log_assert(data[\"gender\"] == payload[\"gender\"], \"User gender matches\", results)\n        log_assert(data[\"status\"] == payload[\"status\"], \"User status matches\", results)\n        user_id = data[\"id\"]\n        # Attach log to Allure report\n        with open(filename, \"r\") as log_file:\n            allure.attach(log_file.read(), name=\"Test Log\", attachment_type=allure.attachment_type.TEXT)\n        print(results)\n>       assert not results, f\"Test failed with errors: {results}\"\nE       AssertionError: Test failed with errors: ['Assertion failed: User email matches : assert False']\nE       assert not ['Assertion failed: User email matches : assert False']\n\ntest_gorest_api.py:78: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"Test creating a user and checking all fields.","status":"failed","statusMessage":"AssertionError: Test failed with errors: ['Assertion failed: User email matches : assert False']\nassert not ['Assertion failed: User email matches : assert False']","statusTrace":"def test_create_user():\n        \"Test creating a user and checking all fields.\"\n        global user_id\n        filename = \"./logs/gorest-api/test_create_user.log\"\n        setup_logger(filename)\n        results = []\n        payload = {\n            \"name\": \"ganesh123\",\n            \"email\": \"ganesh12@gmail.com\",\n            \"gender\": \"male\",\n            \"status\": \"active\"\n        }\n        response = requests.post(GOREST_API_URL, headers=GOREST_HEADERS, json=payload)\n        logger.info(f\"POST {GOREST_API_URL} - Status: {response.status_code}\")\n        logger.info(f\"Payload: {payload}\")\n        logger.info(f\"Response JSON: {response.text}\")\n        assert response.status_code == 201, f\"Failed to create user - status code: {response.status_code}\"\n        logger.info(\"User created successfully\")\n        data = response.json()\n        # Intentionally failing assertion for demonstration\n        log_assert(data[\"name\"] == payload[\"name\"], \"User name matches\", results)\n        log_assert(data[\"email\"]+\"999\" == payload[\"email\"], \"User email matches\", results)\n        log_assert(data[\"gender\"] == payload[\"gender\"], \"User gender matches\", results)\n        log_assert(data[\"status\"] == payload[\"status\"], \"User status matches\", results)\n        user_id = data[\"id\"]\n        # Attach log to Allure report\n        with open(filename, \"r\") as log_file:\n            allure.attach(log_file.read(), name=\"Test Log\", attachment_type=allure.attachment_type.TEXT)\n        print(results)\n>       assert not results, f\"Test failed with errors: {results}\"\nE       AssertionError: Test failed with errors: ['Assertion failed: User email matches : assert False']\nE       assert not ['Assertion failed: User email matches : assert False']\n\ntest_gorest_api.py:78: AssertionError","steps":[],"attachments":[{"uid":"3fa5c7df93287456","name":"Test Log","source":"3fa5c7df93287456.txt","type":"text/plain","size":867},{"uid":"a5de37b29bd18ea9","name":"log","source":"a5de37b29bd18ea9.txt","type":"text/plain","size":909},{"uid":"9ae30e3278cc8a7e","name":"stdout","source":"9ae30e3278cc8a7e.txt","type":"text/plain","size":56}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentStep":false,"attachmentsCount":3,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"suite","value":"test_gorest_api"},{"name":"host","value":"Hemesh"},{"name":"thread","value":"10800-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_gorest_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"515432c7fd41972c.json","parameterValues":[]}